{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nclass BingMap {\n  constructor(options) {\n    var _a;\n\n    this.key = options === null || options === void 0 ? void 0 : options.providerKey; //Bounds are expected to be a nested array of [[sw_lat, sw_lng],[ne_lat, ne_lng]].\n    // We convert them into a string of 'x1,y1,x2,y2'\n\n    let boundsUrlComponent = \"\";\n\n    if ((_a = options === null || options === void 0 ? void 0 : options.searchBounds) === null || _a === void 0 ? void 0 : _a.length) {\n      const bounds = options.searchBounds.reduce((acc, b) => [...acc, b.lat, b.lng], []);\n      boundsUrlComponent = `&umv=${bounds.join(\",\")}`;\n    }\n\n    this.url = `https://dev.virtualearth.net/REST/v1/Locations?output=json${boundsUrlComponent}&key=${this.key}&q=`;\n  }\n\n  search(query) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof this.key === \"undefined\") {\n        return {\n          error: \"BingMap requires an api key\"\n        };\n      } // console.log(this.url + query)\n\n\n      const response = yield fetch(this.url + query).then(res => res.json());\n      return this.formatResponse(response);\n    });\n  }\n\n  formatResponse(response) {\n    const resources = response.resourceSets[0].resources;\n    const count = response.resourceSets[0].estimatedTotal;\n    const info = count > 0 ? resources.map(e => ({\n      bounds: e.bbox.map(bound => Number(bound)),\n      latitude: Number(e.point.coordinates[0]),\n      longitude: Number(e.point.coordinates[1]),\n      name: e.name\n    })) : \"Not Found\";\n    return {\n      info: info,\n      raw: response\n    };\n  }\n\n}\n\nexport { BingMap };","map":{"version":3,"sources":["/Users/erwanbeguin/Documents/Developper/ynov/dataviz/node_modules/react-leaflet-search/lib/Providers/BingMap.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","BingMap","constructor","options","_a","key","providerKey","boundsUrlComponent","searchBounds","length","bounds","reduce","acc","b","lat","lng","join","url","search","query","error","response","fetch","res","json","formatResponse","resources","resourceSets","count","estimatedTotal","info","map","bbox","bound","Number","latitude","point","coordinates","longitude","name","raw"],"mappings":"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","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nclass BingMap {\n    constructor(options) {\n        var _a;\n        this.key = options === null || options === void 0 ? void 0 : options.providerKey;\n        //Bounds are expected to be a nested array of [[sw_lat, sw_lng],[ne_lat, ne_lng]].\n        // We convert them into a string of 'x1,y1,x2,y2'\n        let boundsUrlComponent = \"\";\n        if ((_a = options === null || options === void 0 ? void 0 : options.searchBounds) === null || _a === void 0 ? void 0 : _a.length) {\n            const bounds = options.searchBounds.reduce((acc, b) => [...acc, b.lat, b.lng], []);\n            boundsUrlComponent = `&umv=${bounds.join(\",\")}`;\n        }\n        this.url = `https://dev.virtualearth.net/REST/v1/Locations?output=json${boundsUrlComponent}&key=${this.key}&q=`;\n    }\n    search(query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof this.key === \"undefined\") {\n                return { error: \"BingMap requires an api key\" };\n            }\n            // console.log(this.url + query)\n            const response = yield fetch(this.url + query).then((res) => res.json());\n            return this.formatResponse(response);\n        });\n    }\n    formatResponse(response) {\n        const resources = response.resourceSets[0].resources;\n        const count = response.resourceSets[0].estimatedTotal;\n        const info = count > 0\n            ? resources.map((e) => ({\n                bounds: e.bbox.map((bound) => Number(bound)),\n                latitude: Number(e.point.coordinates[0]),\n                longitude: Number(e.point.coordinates[1]),\n                name: e.name\n            }))\n            : \"Not Found\";\n        return {\n            info: info,\n            raw: response\n        };\n    }\n}\nexport { BingMap };\n"]},"metadata":{},"sourceType":"module"}