{"ast":null,"code":"import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(CheckBox) {\n  var DocumentedCheckBox = describe(CheckBox).availableAt(getAvailableAtBadge('CheckBox')).description('A checkbox toggle control.').usage(\"import { CheckBox } from 'grommet';\\n<CheckBox />\").intrinsicElement('input');\n  DocumentedCheckBox.propTypes = {\n    a11yTitle: PropTypes.string.description(\"Custom label to be used by screen readers.\\n      When provided, an aria-label will be added to the element.\"),\n    checked: PropTypes.bool.description('Same as React <input checked={} />').defaultValue(false),\n    disabled: PropTypes.bool.description(\"Same as React <input disabled={} />. Also adds a hidden input element\\n      with the same name so form submissions work.\").defaultValue(false),\n    id: PropTypes.string.description('The DOM id attribute value to use for the underlying <input/> element.'),\n    label: PropTypes.node.description(\"Label text to place next to the control. \\n      Can be used instead of a11yTitle to meet accessibility requirements\"),\n    name: PropTypes.string.description(\"The DOM name attribute value to use for the underlying <input/> \\n      element.\"),\n    onChange: PropTypes.func.description(\"Function that will be called when the user clicks the check box. It\\n      will be passed a React event object. The current state can be accessed\\n      via event.target.checked. Same as React <input onChange={} />.\"),\n    reverse: PropTypes.bool.description('Whether to show the label in front of the checkbox.').defaultValue(false),\n    toggle: PropTypes.bool.description('Whether to visualize it as a toggle switch.').defaultValue(false),\n    indeterminate: PropTypes.bool.description(\"Whether state is indeterminate.\\nNOTE: This can only be used with non-toggle components\").defaultValue(false)\n  };\n  return DocumentedCheckBox;\n};\nexport var themeDoc = {\n  'checkBox.border.color': {\n    description: 'The border color when unchecked.',\n    type: \"string | { 'dark': string, 'light': string }\",\n    defaultValue: \"{ dark: 'rgba(255, 255, 255, 0.5)', light: 'rgba(0, 0, 0, 0.15)' }\"\n  },\n  'checkBox.border.width': {\n    description: 'The border width when unchecked.',\n    type: 'string',\n    defaultValue: '2px'\n  },\n  'checkBox.check.extend': {\n    description: 'Any additional style for checked CheckBox.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'checkBox.check.radius': {\n    description: 'The radius of the checked icon.',\n    type: 'string',\n    defaultValue: '4px'\n  },\n  'checkBox.check.thickness': {\n    description: 'The stroke width of the checked icon.',\n    type: 'string',\n    defaultValue: '4px'\n  },\n  'checkBox.color': {\n    description: 'The stroke color for the CheckBox icon, and the border when checked.',\n    type: \"string | { 'dark': string, 'light': string }\",\n    defaultValue: undefined\n  },\n  'checkBox.extend': {\n    description: 'Any additional style for CheckBox.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'checkBox.gap': {\n    description: 'The right margin of the CheckBox to its label.',\n    type: 'string',\n    defaultValue: undefined\n  },\n  'checkBox.hover.border.color': {\n    description: 'The border color on hover.',\n    type: \"string | { 'dark': string, 'light': string }\",\n    defaultValue: \"{ dark: 'white', light: 'black' }\"\n  },\n  'checkBox.icon.size': {\n    description: 'The size of the checked icon.',\n    type: 'string',\n    defaultValue: undefined\n  },\n  'checkBox.icon.extend': {\n    description: 'Any additional style for CheckBox icon.',\n    type: 'string | (props)=>{}',\n    defaultValue: undefined\n  },\n  'checkBox.icons.checked': {\n    description: 'The icon to use when checked.',\n    type: 'React.Element',\n    defaultValue: undefined\n  },\n  'checkBox.icons.indeterminate': {\n    description: 'The icon to use when indeterminate.',\n    type: 'React.Element',\n    defaultValue: undefined\n  },\n  'checkBox.size': {\n    description: 'The height and width used for the CheckBox icon.',\n    type: 'string',\n    defaultValue: '24px'\n  },\n  'checkBox.toggle.background': {\n    description: 'The background color of the toggle.',\n    type: \"string | { 'dark': string, 'light': string }\",\n    defaultValue: undefined\n  },\n  'checkBox.toggle.color': {\n    description: 'The color of the toggle knob.',\n    type: \"string | { 'dark': string, 'light': string }\",\n    defaultValue: \"{ dark: '#d9d9d9', light: '#d9d9d9' }\"\n  },\n  'checkBox.toggle.extend': {\n    description: 'Any additional style for CheckBox toggle.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'checkBox.toggle.knob.extend': {\n    description: 'Any additional style for the CheckBox toggle knob.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'checkBox.toggle.radius': {\n    description: 'The border radius used for the toggle and the knob.',\n    type: 'string',\n    defaultValue: '24px'\n  },\n  'checkBox.toggle.size': {\n    description: 'The width size of the toggle.',\n    type: 'string',\n    defaultValue: '48px'\n  }\n};","map":{"version":3,"sources":["/Users/erwanbeguin/Documents/Developper/ynov/dataviz/node_modules/grommet/es6/components/CheckBox/doc.js"],"names":["describe","PropTypes","getAvailableAtBadge","doc","CheckBox","DocumentedCheckBox","availableAt","description","usage","intrinsicElement","propTypes","a11yTitle","string","checked","bool","defaultValue","disabled","id","label","node","name","onChange","func","reverse","toggle","indeterminate","themeDoc","type","undefined"],"mappings":"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","sourcesContent":["import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(CheckBox) {\n  var DocumentedCheckBox = describe(CheckBox).availableAt(getAvailableAtBadge('CheckBox')).description('A checkbox toggle control.').usage(\"import { CheckBox } from 'grommet';\\n<CheckBox />\").intrinsicElement('input');\n  DocumentedCheckBox.propTypes = {\n    a11yTitle: PropTypes.string.description(\"Custom label to be used by screen readers.\\n      When provided, an aria-label will be added to the element.\"),\n    checked: PropTypes.bool.description('Same as React <input checked={} />').defaultValue(false),\n    disabled: PropTypes.bool.description(\"Same as React <input disabled={} />. Also adds a hidden input element\\n      with the same name so form submissions work.\").defaultValue(false),\n    id: PropTypes.string.description('The DOM id attribute value to use for the underlying <input/> element.'),\n    label: PropTypes.node.description(\"Label text to place next to the control. \\n      Can be used instead of a11yTitle to meet accessibility requirements\"),\n    name: PropTypes.string.description(\"The DOM name attribute value to use for the underlying <input/> \\n      element.\"),\n    onChange: PropTypes.func.description(\"Function that will be called when the user clicks the check box. It\\n      will be passed a React event object. The current state can be accessed\\n      via event.target.checked. Same as React <input onChange={} />.\"),\n    reverse: PropTypes.bool.description('Whether to show the label in front of the checkbox.').defaultValue(false),\n    toggle: PropTypes.bool.description('Whether to visualize it as a toggle switch.').defaultValue(false),\n    indeterminate: PropTypes.bool.description(\"Whether state is indeterminate.\\nNOTE: This can only be used with non-toggle components\").defaultValue(false)\n  };\n  return DocumentedCheckBox;\n};\nexport var themeDoc = {\n  'checkBox.border.color': {\n    description: 'The border color when unchecked.',\n    type: \"string | { 'dark': string, 'light': string }\",\n    defaultValue: \"{ dark: 'rgba(255, 255, 255, 0.5)', light: 'rgba(0, 0, 0, 0.15)' }\"\n  },\n  'checkBox.border.width': {\n    description: 'The border width when unchecked.',\n    type: 'string',\n    defaultValue: '2px'\n  },\n  'checkBox.check.extend': {\n    description: 'Any additional style for checked CheckBox.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'checkBox.check.radius': {\n    description: 'The radius of the checked icon.',\n    type: 'string',\n    defaultValue: '4px'\n  },\n  'checkBox.check.thickness': {\n    description: 'The stroke width of the checked icon.',\n    type: 'string',\n    defaultValue: '4px'\n  },\n  'checkBox.color': {\n    description: 'The stroke color for the CheckBox icon, and the border when checked.',\n    type: \"string | { 'dark': string, 'light': string }\",\n    defaultValue: undefined\n  },\n  'checkBox.extend': {\n    description: 'Any additional style for CheckBox.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'checkBox.gap': {\n    description: 'The right margin of the CheckBox to its label.',\n    type: 'string',\n    defaultValue: undefined\n  },\n  'checkBox.hover.border.color': {\n    description: 'The border color on hover.',\n    type: \"string | { 'dark': string, 'light': string }\",\n    defaultValue: \"{ dark: 'white', light: 'black' }\"\n  },\n  'checkBox.icon.size': {\n    description: 'The size of the checked icon.',\n    type: 'string',\n    defaultValue: undefined\n  },\n  'checkBox.icon.extend': {\n    description: 'Any additional style for CheckBox icon.',\n    type: 'string | (props)=>{}',\n    defaultValue: undefined\n  },\n  'checkBox.icons.checked': {\n    description: 'The icon to use when checked.',\n    type: 'React.Element',\n    defaultValue: undefined\n  },\n  'checkBox.icons.indeterminate': {\n    description: 'The icon to use when indeterminate.',\n    type: 'React.Element',\n    defaultValue: undefined\n  },\n  'checkBox.size': {\n    description: 'The height and width used for the CheckBox icon.',\n    type: 'string',\n    defaultValue: '24px'\n  },\n  'checkBox.toggle.background': {\n    description: 'The background color of the toggle.',\n    type: \"string | { 'dark': string, 'light': string }\",\n    defaultValue: undefined\n  },\n  'checkBox.toggle.color': {\n    description: 'The color of the toggle knob.',\n    type: \"string | { 'dark': string, 'light': string }\",\n    defaultValue: \"{ dark: '#d9d9d9', light: '#d9d9d9' }\"\n  },\n  'checkBox.toggle.extend': {\n    description: 'Any additional style for CheckBox toggle.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'checkBox.toggle.knob.extend': {\n    description: 'Any additional style for the CheckBox toggle knob.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'checkBox.toggle.radius': {\n    description: 'The border radius used for the toggle and the knob.',\n    type: 'string',\n    defaultValue: '24px'\n  },\n  'checkBox.toggle.size': {\n    description: 'The width size of the toggle.',\n    type: 'string',\n    defaultValue: '48px'\n  }\n};"]},"metadata":{},"sourceType":"module"}